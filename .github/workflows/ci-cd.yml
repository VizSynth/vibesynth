name: CI/CD Pipeline

on:
  push:
    branches: [ main, feat-*, fix-*, docs-*, perf-*, refactor-* ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    name: "🧪 Test Every Commit"
    runs-on: ubuntu-latest
    
    steps:
    - name: "📥 Checkout code"
      uses: actions/checkout@v4
      
    - name: "⚙️ Setup Node.js"
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: "📦 Install dependencies"
      run: npm ci || npm install
      
    - name: "🎭 Install Playwright browsers"
      run: npx playwright install --with-deps chromium
      
    - name: "🚀 Start test server"
      run: |
        python3 -m http.server 8080 &
        sleep 3
        
    - name: "🧪 Run all tests"
      run: npx playwright test --config=playwright.existing.config.js
      
    - name: "📊 Upload test results on failure"
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-results-${{ github.sha }}
        path: test-results/
        
    - name: "❌ Notify test failure"
      if: failure()
      run: |
        echo "::error::🚨 TESTS FAILED! Blocking all deployments."
        echo "::error::View detailed results in the uploaded artifacts."
        exit 1

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install ESLint
      run: npm install -g eslint
      
    - name: Run ESLint
      run: eslint script.js layout.js --format=github-actions
      continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security audit
      run: |
        echo "Scanning for security issues..."
        # Check for common security patterns
        grep -r "eval\|innerHTML\|document.write" . --exclude-dir=.git || true
        
    - name: Check dependencies
      run: |
        npm audit --audit-level=moderate || true

  deploy-dev:
    name: "🚀 Deploy to Development"
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: |
      (contains(github.ref, 'refs/heads/feat-') || 
       contains(github.ref, 'refs/heads/fix-') ||
       contains(github.ref, 'refs/heads/docs-') ||
       contains(github.ref, 'refs/heads/perf-') ||
       contains(github.ref, 'refs/heads/refactor-')) && 
      github.event_name == 'push'
    environment: development
    
    steps:
    - name: "📥 Checkout code"
      uses: actions/checkout@v4
      
    - name: "⚙️ Setup Node.js"
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: "🏗️ Run deploy script"
      run: |
        chmod +x deploy-docs.sh
        ./deploy-docs.sh
        
    - name: "🌐 Deploy to GitHub Pages (Dev Branch)"
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        publish_branch: gh-pages-dev
        force_orphan: true
        
    - name: "✅ Development deployment complete"
      run: |
        echo "🎉 Successfully deployed to development environment"
        echo "🔗 Dev URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/dev"

  deploy-staging:
    name: "🎯 Deploy to Staging"
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: "📥 Checkout code"
      uses: actions/checkout@v4
      
    - name: "⚙️ Setup Node.js"
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: "🏗️ Run deploy script"
      run: |
        chmod +x deploy-docs.sh
        ./deploy-docs.sh
        
    - name: "🎯 Deploy to GitHub Pages (Staging)"
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        publish_branch: gh-pages
        force_orphan: true
        
    - name: "✅ Staging deployment complete"
      run: |
        echo "🎉 Successfully deployed to staging environment"
        echo "🔗 Staging URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
        
  deploy-production:
    name: "🌍 Deploy to Production"
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: "📥 Checkout code"
      uses: actions/checkout@v4
      
    - name: "⚙️ Setup Node.js"
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: "🏗️ Run deploy script"
      run: |
        chmod +x deploy-docs.sh
        ./deploy-docs.sh
        
    - name: "🌍 Deploy to Production (vibesynth.one)"
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        cname: vibesynth.one
        force_orphan: true
        
    - name: "🎉 Production deployment complete"
      run: |
        echo "🚀 Successfully deployed to PRODUCTION!"
        echo "🌍 Live URL: https://vibesynth.one"
        echo "📊 Build: ${{ github.run_number }}"
        echo "🔗 Commit: ${{ github.sha }}"
        echo "📋 Release: ${{ github.event.release.tag_name }}"

  notify:
    name: "📢 Pipeline Status"
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: always()
    
    steps:
    - name: "✅ Success notification"
      if: ${{ needs.test.result == 'success' && needs.lint.result == 'success' && needs.security.result == 'success' }}
      run: |
        echo "::notice::🎉 ALL TESTS PASSED! Pipeline successful."
        echo "::notice::✅ Code quality: GOOD"
        echo "::notice::🔒 Security: CLEAN"
        echo "::notice::🚀 Ready for deployment"
        
    - name: "❌ Failure notification"
      if: ${{ needs.test.result == 'failure' || needs.lint.result == 'failure' || needs.security.result == 'failure' }}
      run: |
        echo "::error::🚨 PIPELINE FAILED - DEPLOYMENTS BLOCKED!"
        echo "::error::❌ Tests: ${{ needs.test.result }}"
        echo "::error::📝 Lint: ${{ needs.lint.result }}"
        echo "::error::🔒 Security: ${{ needs.security.result }}"
        echo "::error::🔍 Check the detailed logs and fix issues before deploying."
        exit 1