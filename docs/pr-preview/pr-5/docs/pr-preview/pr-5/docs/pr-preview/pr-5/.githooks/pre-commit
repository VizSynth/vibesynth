#!/bin/bash

# VibeSynth Pre-commit Hook
# Runs tests before every commit to ensure code quality

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîç VibeSynth Pre-commit Hook${NC}"
echo "=============================="

# Check if we're in the right directory
if [ ! -f "package.json" ]; then
    echo -e "${RED}‚ùå Error: Not in VibeSynth root directory${NC}"
    exit 1
fi

# Function to print status messages
print_status() {
    echo -e "${BLUE}[PRE-COMMIT]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if there are any staged changes
STAGED_FILES=$(git diff --cached --name-only)
if [ -z "$STAGED_FILES" ]; then
    print_warning "No staged changes found"
    exit 0
fi

print_status "Staged files:"
echo "$STAGED_FILES" | sed 's/^/  - /'
echo ""

# Check if test-related files are modified
TEST_FILES_CHANGED=$(echo "$STAGED_FILES" | grep -E '\.(js|ts|html|css)$|package\.json|playwright\.config\.js|tests/' || true)

if [ -z "$TEST_FILES_CHANGED" ]; then
    print_warning "No code files changed, skipping tests"
    exit 0
fi

print_status "Code files changed, running tests..."

# Run ESLint on staged JS files
JS_FILES=$(echo "$STAGED_FILES" | grep -E '\.(js)$' | grep -v node_modules || true)
if [ ! -z "$JS_FILES" ]; then
    print_status "Running ESLint on staged JavaScript files..."
    if npx eslint $JS_FILES --fix; then
        print_success "ESLint passed"
        
        # Re-stage files that were automatically fixed
        for file in $JS_FILES; do
            git add "$file"
        done
    else
        print_error "ESLint failed - please fix the issues above"
        echo ""
        echo "üí° Common fixes:"
        echo "  - Run: npx eslint --fix <filename>"
        echo "  - Or fix manually and re-commit"
        exit 1
    fi
else
    print_status "No JavaScript files to lint"
fi

# Run tests
print_status "Running comprehensive test suite..."

# Check if server is already running
if curl -s http://127.0.0.1:8080 > /dev/null 2>&1; then
    print_status "Development server already running, using existing server"
    TEST_COMMAND="npx playwright test --config=playwright.existing.config.js"
else
    print_status "Starting development server for tests"
    TEST_COMMAND="npm run test:with-server"
fi

# Run the tests
if $TEST_COMMAND; then
    print_success "All tests passed! ‚ú®"
else
    print_error "Tests failed - commit blocked"
    echo ""
    echo "üí° To fix:"
    echo "  1. Fix the failing tests"
    echo "  2. Run: npm test"
    echo "  3. Ensure all tests pass"
    echo "  4. Re-commit your changes"
    echo ""
    echo "üöÄ Or to skip tests (not recommended):"
    echo "  git commit --no-verify"
    exit 1
fi

# Success
print_success "Pre-commit checks passed! üéâ"
echo ""
print_status "‚úÖ ESLint: Passed"
print_status "‚úÖ Tests: All 47 tests passed"
print_status "‚úÖ Code quality: Verified"
echo ""
print_success "Ready to commit! üöÄ"